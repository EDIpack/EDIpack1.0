
!ED_MAIN:
subroutine init_solver_site(bath)
  USE EDIPACK, only: ed_init_solver
  implicit none
  real(8),dimension(:),intent(inout)    :: bath
  call ed_init_solver(bath)
end subroutine init_solver_site
!
subroutine init_solver_ineq(bath)
  USE EDIPACK, only: ed_init_solver
  implicit none
  real(8),dimension(:,:),intent(inout)    :: bath
  call ed_init_solver(bath)
end subroutine init_solver_ineq




subroutine solve_site(bath,hloc,sflag)
  USE EDIPACK, only: ed_solve,Nspin,Norb
  USE SCIFOR, only: assert_shape
  implicit none
  real(8),dimension(:),intent(in)       :: bath
  real(8),dimension(:,:,:,:),intent(in) :: hloc
  logical,intent(in)                    :: sflag
  call assert_shape(hloc,[Nspin,Nspin,Norb,Norb],"solve","hloc")  
  call ed_solve(bath,hloc,sflag=sflag)
end subroutine solve_site
!
subroutine solve_ineq(bath,hloc,mpi_lanc)
  USE EDIPACK, only: ed_solve,Nspin,Norb
  USE SCIFOR, only: assert_shape
  implicit none
  real(8),dimension(:,:),intent(in)       :: bath
  real(8),dimension(:,:,:,:,:),intent(in) :: hloc
  logical,intent(in)                      :: mpi_lanc
  integer                                 :: Nineq
  Nineq = size(bath,1)
  call assert_shape(Hloc,[Nineq,Nspin,Nspin,Norb,Norb],"solve","hloc")  
  call ed_solve(bath,hloc,mpi_lanc)
end subroutine solve_ineq
